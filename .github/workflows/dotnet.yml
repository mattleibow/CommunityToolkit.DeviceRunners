name: .NET Core

on:
  pull_request:
  push:
    branches: [ main, 'releases/**' ]
  release:
    types: [ published ]

jobs:


  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: ./.github/workflows/setup-tools
    - name: Build
      run: dotnet build --configuration Release
    - name: Upload Logs
      uses: actions/upload-artifact@v1
      if: ${{ always() }}
      with:
        name: Logs - Windows
        path: ./artifacts/logs


  # build-macos:
  #   name: Build on macOS
  #   runs-on: macos-13
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Setup Xcode
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: latest-stable
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: 7.0.x
  #   - name: Setup .NET MAUI
  #     run: dotnet workload install maui --source https://api.nuget.org/v3/index.json
  #   - name: Setup Tizen.NET
  #     run: curl -sSL https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.sh | bash
  #   - name: Setup Local .NET Tools
  #     run: dotnet tool restore
  #   - name: Build
  #     run: dotnet build --configuration Debug /bl:./artifacts/logs/msbuild-build.binlog
  #   - name: Upload Logs
  #     uses: actions/upload-artifact@v1
  #     if: ${{ always() }}
  #     with:
  #       name: Logs - macOS
  #       path: ./artifacts/logs


  # test-ios:
  #   name: Test on iOS
  #   runs-on: macos-13
  #   env:
  #     TEST_RUNTIME_IDENTIFIER: iossimulator-x64
  #     TEST_CONFIGURATION: Debug
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Setup Xcode
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: latest-stable
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: 7.0.x
  #   - name: Setup .NET MAUI
  #     run: dotnet workload install maui --source https://api.nuget.org/v3/index.json
  #   - name: Setup Tizen.NET
  #     run: curl -sSL https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.sh | bash
  #   - name: Setup Local .NET Tools
  #     run: dotnet tool restore
  #   - name: Publish App
  #     run: dotnet build sample/SampleMauiApp/SampleMauiApp.csproj -f net7.0-ios -r ${{ env.TEST_RUNTIME_IDENTIFIER }} -c ${{ env.TEST_CONFIGURATION }} /bl:./artifacts/logs/msbuild-publish.binlog
  #   - name: Run Tests
  #     run: dotnet xharness apple test --target ios-simulator-64 --app sample/SampleMauiApp/bin/${{ env.TEST_CONFIGURATION }}/net7.0-ios/${{ env.TEST_RUNTIME_IDENTIFIER }}/SampleMauiApp.app --output-directory artifacts
  #   - name: Upload Artifacts
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: Test Results - iOS
  #       path: ./artifacts


  # pack:
  #   name: Pack
  #   env:
  #     NUPKG_MAJOR: 0.999
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: 7.0.x
  #   - name: Setup Tizen.NET
  #     shell: pwsh
  #     run: |
  #       Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'
  #       .\workload-install.ps1
  #   - name: Setup Local .NET Tools
  #     run: dotnet tool restore
  #   - name: Package NuGets
  #     shell: pwsh
  #     run: |
  #       $VERSION="$env:NUPKG_MAJOR-ci.$env:GITHUB_RUN_ID"
  #       if ($env:GITHUB_EVENT_NAME -eq "release") {
  #         $VERSION = $env:GITHUB_REF.Substring($env:GITHUB_REF.LastIndexOf('/') + 1)
  #       }
  #       echo "PACKAGE VERSION: $VERSION"
        
  #       dotnet pack --output ./artifacts/nugets --configuration Release -p:PackageVersion=$VERSION /bl:./artifacts/logs/msbuild-pack.binlog
  #   - name: Upload NuGet Artifacts
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: NuGet
  #       path: ./artifacts/nugets
  #   - name: Upload Logs
  #     uses: actions/upload-artifact@v1
  #     if: ${{ always() }}
  #     with:
  #       name: Pack Logs - Windows
  #       path: ./artifacts/logs


  # publish:
  #   name: Publish to nuget.org
  #   needs: pack
  #   runs-on: windows-latest
  #   if: github.event_name == 'release'
  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: NuGet
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: '7.0.x'
  #     - name: Push NuGet
  #       run: dotnet nuget push NuGet\*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_ORG_API_KEY }}
